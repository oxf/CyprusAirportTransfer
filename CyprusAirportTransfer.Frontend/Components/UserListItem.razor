@using CyprusAirportTransfer.App.UseCases.Users.Commands.UpdateUser;
@using CyprusAirportTransfer.App.UseCases.Users.Queries.GetAllUsers;
@using CyprusAirportTransfer.App.UseCases.Users.Queries.GetUserById;
@using CyprusAirportTransfer.Frontend.Services;
@using Microsoft.AspNetCore.Components.Forms;
<div class="user-list-item container">
    <div class="row">
        <div class="col-md-10">
            <row>
                <h5>@title</h5>
                <p>@subtitle</p>
            </row>
            <row>
                <p id="labelMessage" class="col-md-2 alert-success">@message</p>
            </row>
            <row style="@(Collapsed ? "display:none;" : "display:block;")">
                @if(userFull == null)
                {
                    <p><em>Loading...</em></p>
                } else
                {
                    <EditForm Model="@userFull">
                        <p>
                            <div class="form-group row">
                                <div class="col-md-2">ID</div>
                                <div class="col-md-7"><InputNumber @bind-Value="@userFull.Id" contenteditable="false" /></div>
                            </div>
                        </p>
                        <p>
                            <div class="form-group row">
                                <div class="col-md-2">Email</div>
                                <div class="col-md-7"><InputText @bind-Value="@userFull.Email" contenteditable="true" /></div>
                            </div>
                        </p>
                        <p>
                            <div class="form-group row">
                                <div class="col-md-2">Username</div>
                                <div class="col-md-7"><InputText @bind-Value="@userFull.UserName" contenteditable="true" /></div>
                            </div>
                        </p>
                        <p>
                            <div class="form-group row">
                                <div class="col-md-2">Created</div>
                                <div class="col-md-7"><InputDate @bind-Value="@userFull.CreatedDate" contenteditable="false" /></div>
                            </div>
                        </p>
                        <p>
                            <div class="form-group row">
                                <div class="col-md-2">Updated</div>
                                <div class="col-md-7"><InputDate @bind-Value="@userFull.UpdatedDate" contenteditable="false" /></div>
                            </div>
                        </p>
                    </EditForm>
                }

            </row>
        </div>
        <div class="col-md-2 user-list-item-buttons">
            <div id="btnView" @onclick="()=> {
                this.Collapsed = !this.Collapsed;
                if(!this.Collapsed) {
                    Expand();
                } else {
                    message = null;
                }
            }" style="display:block" class="btn btn-primary user-list-item-button">@(Collapsed ? "View" : "Hide")</div>
            <div id="btnSave" @onclick="HandleValidSubmitAsync" type="submit" style="@(Collapsed ? "display:none;" : "display:block;")" class="btn btn-primary user-list-item-button">Save</div>
            <div id="btnDelete" style="@(Collapsed ? "display:none;" : "display:block;")" class="btn btn-danger user-list-item-button">Delete</div>
        </div>
    </div>
</div>

@code {
    private string title { get; set; }
    private string subtitle { get; set; }
    private string message { get; set; }

    private UserService userService { get; set; }
    [Parameter]
    public GetAllUsersDto? user { get; set; }

    [Parameter]
    public GetUserByIdDto? userFull { get; set; }

    private bool Collapsed = true;

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(user);
        title = user.UserName;
        subtitle = user.Email;
    }

    protected override void OnInitialized() => userService = new UserService();

    private async Task HandleValidSubmitAsync()
    {
        var updateResult = await userService.UpdateUser(new UpdateUserCommand
        {
            Id = userFull.Id,
            Email = userFull.Email,
            UserName = userFull.UserName
        });
        foreach(var responseMessage in updateResult.Messages)
        {
            message += "- " + responseMessage + "\n";
        }
        title = userFull.UserName;
        subtitle = userFull.Email;
        StateHasChanged();
    }

    protected async Task Expand()
    {
        if(user != null)
        {
            var userFullRes = await userService.GetUserByIdAsync(user.Id);
            if(userFullRes.Succeeded)
            {
                userFull = userFullRes.Data;
                StateHasChanged();
            }
        }
    }
}
