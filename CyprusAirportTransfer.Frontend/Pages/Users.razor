@page "/users"
@using CyprusAirportTransfer.App.UseCases.Users.Queries.GetAllUsers;
@using CyprusAirportTransfer.App.UseCases.Users.Queries.GetUserWithPagination;
@using CyprusAirportTransfer.Frontend.Services;
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>List of Users</h1>
<div class="row">
    <div class="col-md-2">
        <div class="add-button btn btn-primary" @onclick="DisplayNewUserForm">@(displayNewUserForm ? "Hide" : "New")</div>
    </div>
</div>
<div class="row" style="@(displayNewUserForm ? "display:block;" : "display:none;")">
    <CyprusAirportTransfer.Frontend.Components.NewUserForm OnFormSubmitted="HandleFormSubmitted" />
</div>
<div class="row">
    @if (users == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var user in users)
        {
            <CyprusAirportTransfer.Frontend.Components.UserListItem user="user" OnFormSubmitted="HandleFormSubmitted" />
        }
    }
</div>
<div class="row">
    @for(int i = 1; i <= totalPages; i++)
    {
        <p>i</p>
    }
</div>   

@code {
    private List<GetUsersWithPaginationDto> users;
    private int pageNumber = 1;
    private int totalPages;
    private int pageSize = 2;
    private bool displayNewUserForm = false;

    protected override async Task OnInitializedAsync()
    {
        var client = new UserService();
        var result = await client.GetUsersPagedAsync(pageNumber, pageSize);
        if(result.Succeeded)
        {
            users = result.Data.Data;
            totalPages = result.Data.TotalPages;
        }
    }
     
    protected void DisplayNewUserForm()
    {
        displayNewUserForm = !displayNewUserForm;
    }

    private async Task HandleFormSubmitted()
    {
        var client = new UserService();
        var result = await client.GetUsersPagedAsync(pageNumber, pageSize);
        if (result.Succeeded)
        {
            users = result.Data.Data;
            totalPages = result.Data.TotalPages;
        }
    }

}
